import { VerticalBox } from "std-widgets.slint";

import { Palette, Utils, Font, Logic } from "./globals.slint";

export struct DraggedPiece {
    piece: int,
    x: length,
    y: length,
}

export component Board inherits Rectangle {
    in property <[int]> board_state: [];
    in property <DraggedPiece> dragged_piece;

    TouchArea {
        for i in 64: Rectangle {
            height: parent.height / 8;
            width: parent.width / 8;

            // build the board (starting from the bottom left corner A1)
            x: mod(i, 8) * self.width;
            y: (7 - floor(i / 8)) * self.height;
            background: mod(floor(i / 8) + i, 2) == 0 ? Palette.dark_sq : Palette.light_sq;

            // Add numbers to left file (1-8)
            if (mod(i, 8) == 0) : Text {
                text: Utils.files[floor(i / 8)]; // Adjust text to match reversed rank
                x: 3px;
                y: 0px;
                color: mod(floor(i / 8) + i, 2) == 0 ? Palette.light_sq : Palette.dark_sq;
                font-size: Font.font_size_sm;
                font-weight: Font.semi_bold;
            }

            // Add letters to bottom rank (a-h)
            if (i < 8) : Text {
                text: Utils.ranks[i];
                x: parent.width - 13px;
                y: parent.height - 22px;
                color: mod(floor(i / 8) + i, 2) == 0 ? Palette.light_sq : Palette.dark_sq;
                font-size: Font.font_size_sm;
                font-weight: Font.semi_bold;
            }

            if (board_state[i] != 0 && dragged_piece.piece != i) : Image {
                source: Utils.piece_urls[board_state[i]];
                width: parent.width;
                height: parent.height;
            }
        }

        if (dragged_piece.piece != -1) : Image {
            source: Utils.piece_urls[board_state[dragged_piece.piece]];
            width: 80px;
            height: 80px;
            x: dragged_piece.x;
            y: dragged_piece.y;
        }

        moved => {
            Logic.drag_piece(self.mouse-x, self.mouse-y);
        }
    }
}
