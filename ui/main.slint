import { Board } from "./board.slint";
import { Dashboard } from "./dashboard.slint";
import { EvalBar } from "./eval.slint";
import { Dimensions, Palette, RustInterface } from "./globals.slint";

export { RustInterface } // export to use in rust code

struct BoardState {
    board: [int],
    turn: int,
    halfmove_clock: int,
    fullmove_count: int,
}

export component AppWindow inherits Window {
    in-out property <BoardState> board_state;
    in-out property <int> dragged_piece_sq;
    in-out property <string> compute_time;

    title: "Oracle";

    height: Dimensions.board_size;
    width:  Dimensions.board_size * 2;

    board := Board {
        board_state: board_state.board;
        dragged_piece_sq: dragged_piece_sq;

        x: 0;
        height: parent.height;
        width: parent.width / 2;
    }
    eval := EvalBar {
        x: board.width;
        b_eval: 50%;
        w_eval: 50%;
    }
    dash := Dashboard {
        x: board.width + eval.width;
        width: board.width - eval.width;
        height: board.height;

        turn: board_state.turn;
        halfmove_clock: board_state.halfmove_clock;
        fullmove_count: board_state.fullmove_count;
        compute_time: compute_time;
    }

    key_handler := FocusScope {
        key-pressed(event) => {
            if (!event.repeat) {
                if (event.text == Key.LeftArrow) {
                    RustInterface.undo_move();
                }
                if (event.text == Key.RightArrow) {
                    RustInterface.redo_move();
                }
            }
            accept
        }
    }
}
