import { Board, BoardState } from "./board.slint";
import { Dashboard, DashboardState, SlintMoveInfo } from "./dashboard.slint";
import { EvalBar } from "./eval.slint";
import { Dimensions, RustInterface } from "./globals.slint";
import { Palette } from "globals.slint";

export { RustInterface, BoardState, DashboardState, SlintMoveInfo } // export to use in rust code

export component AppWindow inherits Window {
    in-out property <BoardState> board_state;
    in-out property <DashboardState> dashboard_state;
    in-out property <int> dragged_piece_sq;

    title: "Oracle";

    height: Dimensions.board_size;
    width:  Dimensions.board_size + Dimensions.dashboard_w;
    background: Palette.dashboard_bg;

    board := Board {
        board_state: board_state;
        dragged_piece_sq: dragged_piece_sq;

        x: 0;
        height: Dimensions.board_size;
        width: Dimensions.board_size;
    }
    dash := Dashboard {
        x: Dimensions.board_size + eval.width;
        width: Dimensions.dashboard_w - eval.width;
        height: Dimensions.board_size;

        dashboard_state: dashboard_state;
    }
    eval := EvalBar {
        x: Dimensions.board_size;
        b_eval: 50%;
        w_eval: 50%;
    }

    key_handler := FocusScope {
        init() => { self.focus(); }

        key-pressed(event) => {
            if (!event.repeat) {
                if (event.text == Key.LeftArrow) {
                    RustInterface.undo_move();
                }
                if (event.text == Key.RightArrow) {
                    RustInterface.redo_move();
                }
            }
            accept
        }
    }
}
