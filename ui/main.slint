import { Board, BoardState } from "./board.slint";
import { Dashboard, DashboardState, SlintMoveInfo } from "./dashboard.slint";
import { EvalBar } from "./eval.slint";
import { Dimensions, RustInterface } from "./globals.slint";
import { Palette } from "globals.slint";

export { RustInterface, BoardState, DashboardState, SlintMoveInfo } // export to use in rust code

export component AppWindow inherits Window {
    in-out property <BoardState> board_state;
    in-out property <DashboardState> dashboard_state;
    in-out property <int> dragged_piece_sq;

    title: "Oracle";

    background: Palette.dashboard_bg;
    height: Dimensions.board_size;
    width:  Dimensions.board_size + Dimensions.dashboard_w;

    board := Board {
        board_state: board_state;
        dragged_piece_sq: dragged_piece_sq;

        height: Dimensions.board_size;
        width: Dimensions.board_size;
        x: 0;
    }
    dash := Dashboard {
        height: Dimensions.board_size;
        width: Dimensions.dashboard_w - eval.width;
        x: Dimensions.board_size + eval.width;

        dashboard_state: dashboard_state;
    }
    eval := EvalBar {
        b_eval: 50%;
        w_eval: 50%;
        x: Dimensions.board_size;
    }

    key_handler := FocusScope {
        init() => { self.focus(); }

        key-pressed(event) => {
            if (event.text == Key.LeftArrow) {
                RustInterface.undo_move();
            }
            if (event.text == Key.RightArrow) {
                RustInterface.redo_move();
            }
            accept
        }
    }
}
