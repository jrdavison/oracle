export global Dimensions {
    out property <length> board_size: 640px;
    out property <length> sq_size: 80px;
}

export global Palette {
    // board
    out property <color> light_sq: rgb(240, 217, 181);
    out property <color> dark_sq: rgb(181, 136, 99);
    out property <color> valid_sq: rgba(35, 64, 153, 0.45);
    out property <color> last_move_sq: rgba(255, 204, 0, 0.45);

    // dashboard
    out property <color> dashboard_bg: rgb(25, 25, 25);
    out property <color> alternate_bg: rgb(40, 40, 40);
    out property <color> border: rgb(60, 60, 60);
}

export global Font {
    out property <int> semi_bold: 600;
    out property <int> bold: 800;
    out property <length> font_size_sm: 13px;
    out property <length> font_size_md: 16px;
    out property <length> font_size_lg: 24px;
}

export global Utils {
    out property <[int]> files: [1, 2, 3, 4, 5, 6, 7, 8];
    out property <[string]> ranks: ["a", "b", "c", "d", "e", "f", "g", "h"];

    // TODO: this works but there has to be a better way to do this
    out property <[image]> piece_urls: [
        @image-url(""),
        @image-url("pieces/1.png"),
        @image-url("pieces/2.png"),
        @image-url("pieces/3.png"),
        @image-url("pieces/4.png"),
        @image-url("pieces/5.png"),
        @image-url("pieces/6.png"),
        @image-url(""),
        @image-url(""),
        @image-url("pieces/9.png"),
        @image-url("pieces/10.png"),
        @image-url("pieces/11.png"),
        @image-url("pieces/12.png"),
        @image-url("pieces/13.png"),
        @image-url("pieces/14.png"),
    ];

    public pure function square_to_x(sq: int, sq_width: length) -> length {
        Math.mod(sq, 8) * sq_width;
    }

    public pure function square_to_y(sq: int, sq_height: length) -> length {
        (7 - Math.floor(sq / 8)) * sq_height;
    }

    public pure function square_color(sq: int) -> int {
        return Math.mod(Math.floor(sq / 8) + sq, 2);
    }

    public pure function constrain_mouse_x(x: length) -> length {
        Math.min(Math.max(x, 0), Dimensions.board_size);
    }

    public pure function constrain_mouse_y(y: length) -> length {
        Math.min(Math.max(y, 0), Dimensions.board_size);
    }
}

export global RustInterface {
    pure callback square_from_xy(/* x */ length, /* y */ length) -> int;
    pure callback highlight_valid_move_sq(/* from */ int, /* to */ int) -> bool;
    callback move_piece(/* src */ int, /* dest */ int);
    callback undo_move();
    callback redo_move();
}
