import { VerticalBox, ListView, StandardTableView, HorizontalBox } from "std-widgets.slint";

import { Palette, Font } from "./globals.slint";
import { Dimensions } from "globals.slint";

export struct SlintMoveInfo {
    white: string,
    black: string,
}

export struct DashboardState {
    move_history: [SlintMoveInfo],
    turn: int,
    en_passant_square: string,
    halfmove_clock: int,
    compute_time: string,
}

export component Dashboard inherits Rectangle {
    in property <DashboardState> dashboard_state;
    
    property <length> move_table_height: 350px;
    property <length> move_table_width: Dimensions.dashboard_w * 0.85;

    property <[{col1: string, col2: string, col3: string}]> columns: [
        {col1: "Move", col2: "White", col3: "Black"}
    ];

    property <[{text: string, value: string}]> info: [
        {text: "Halfmove Clock:", value: dashboard_state.halfmove_clock},
        {text: "En Passant Square:", value: dashboard_state.en_passant_square},
        {text: "Time to compute valid moves:", value: dashboard_state.compute_time}
    ];

    VerticalLayout {
        padding: 10px;

        HorizontalLayout {
            alignment: center;

            move_history_border := Rectangle {
                height: move_table_height;
                width: move_table_width;
                border-color: Palette.border;
                border-width: 2px;
                border-radius: 2px;
            
                move_history := ListView {
                    height: move_history_border.height - (move_history_border.border_width * 2);
                    width: move_history_border.width - (move_history_border.border_width * 2);
                    for move[i] in root.dashboard_state.move-history : Rectangle {
                        background: Math.mod(i, 2) == 0 ? Palette.dashboard_bg : Palette.alternate_bg;
                        width: move_history.width;
                        HorizontalLayout {
                            padding: 8px;
                            Text {
                                color: white;
                                min-width: move_table_width * (1/5);
                                text: (i + 1) + ".";
                                font-size: Font.font_size_sm;
                            }
                            Text {
                                color: white;
                                min-width: move_table_width * (2/5);
                                text: move.white;
                                font-size: Font.font_size_sm;
                                horizontal-alignment: center;
                            }
                            Text {
                                color: white;
                                min-width: move_table_width  * (2/5);
                                text: move.black;
                                font-size: Font.font_size_sm;
                                horizontal-alignment: center;
                            }
                        }
                    }
                }
            }
        }
    }
    
    info_table := ListView {
        x: 0;
        y: Dimensions.board_size - self.height;
        height: 93px;
        width: 100%;

        for row[i] in root.info : Rectangle {
            background: Math.mod(i, 2) == 0 ? Palette.alternate_bg : Palette.dashboard_bg;
            width: info_table.width;
            HorizontalLayout {
                padding: 8px;
                Text {
                    color: white;
                    min-width: info_table.width / 2;
                    text: row.text;
                    font-size: Font.font_size_sm;
                }
                Text {
                    color: white;
                    min-width: info_table.width / 2;
                    text: row.value;
                    font-size: Font.font_size_sm;
                    horizontal-alignment: center;
                }
            }
        }
    }
}
